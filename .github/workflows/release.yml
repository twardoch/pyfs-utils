name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[testing]
        pip install pytest-cov
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=pyfs_utils --cov-report=xml

  build:
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build PyInstaller
    
    - name: Build package
      run: |
        python -m build
    
    - name: Install package for binary creation
      run: |
        pip install dist/*.whl
    
    - name: Create binary with PyInstaller (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        pyinstaller --onefile --name pyfs-fibonacci-${{ matrix.os }}-py${{ matrix.python-version }} $(which pyfs-fibonacci)
    
    - name: Create binary with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --onefile --name pyfs-fibonacci-${{ matrix.os }}-py${{ matrix.python-version }}.exe $(python -c "import sys; print(sys.executable.replace('python.exe', 'Scripts/pyfs-fibonacci.exe'))")
    
    - name: Test binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        ./dist/pyfs-fibonacci-${{ matrix.os }}-py${{ matrix.python-version }} 5
    
    - name: Test binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        ./dist/pyfs-fibonacci-${{ matrix.os }}-py${{ matrix.python-version }}.exe 5
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/
    
    - name: Upload binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          dist/pyfs-fibonacci-*

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "dist/*,artifacts/binary-*/*"
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        prerelease: false
        generateReleaseNotes: true
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        twine upload --repository testpypi dist/* || true